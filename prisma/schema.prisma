generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String

  ownedProjects Project[] @relation("ProjectOwner")
  memberships Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id      String @id @default(uuid())
  name    String
  ownerId String 

  owner User @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  members Membership[]

  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  id        String @id @default(uuid())
  userId    String 
  projectId String 
  role      String @default("MEMBER") 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assignedTasks Task[] @relation("TaskAssignee")

  createdAt DateTime @default(now())

  @@unique([userId, projectId])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  order       Int 
  projectId   String 
  assigneeId  String? 

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assignee Membership? @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BACKLOG
}
